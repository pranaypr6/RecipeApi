{"version":3,"sources":["components/Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","recipeName","imageSrc","className","style","width","src","alt","href","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","fetchAPI","a","fetch","response","json","data","hits","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","placeholder","value","onChange","e","target","onClick","preventDefault","alert","map","recipe","index","label","image","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uRAqBeA,G,YAlBA,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,SAC5B,OACE,yBAAKC,UAAU,OAAOC,MAAO,CAAEC,MAAO,UACpC,yBAAKC,IAAKJ,EAAUC,UAAU,eAAeI,IAAI,QACjD,yBAAKJ,UAAU,aACb,wBAAIA,UAAU,cAAcF,GAC5B,uBAAGE,UAAU,aAAb,kGAIA,uBAAGK,KAAK,IAAIL,UAAU,mBAAtB,iBC+FOM,EAxGH,WACV,IADgB,EAGcC,mBAAS,IAHvB,mBAGTC,EAHS,KAGAC,EAHA,OAIYF,mBAAS,IAJrB,mBAITG,EAJS,KAIDC,EAJC,OAKUJ,mBAAS,WALnB,mBAKTK,EALS,KAKFC,EALE,KAOhBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAQ,uCAAG,8BAAAC,EAAA,sEACQC,MAAM,mCAAD,OACSL,EADT,mBAXf,SAWe,oBAVd,mCAUc,sDADb,cACTM,EADS,gBAIIA,EAASC,OAJb,OAITC,EAJS,OAKfX,EAAWW,EAAKC,MALD,2CAAH,qDAgBd,OACE,yBAAKrB,UAAU,mBACb,yBAAKA,UAAU,iDACb,uBAAGA,UAAU,eAAeK,KAAK,KAAjC,YAGA,4BACEL,UAAU,iBACVsB,KAAK,SACLC,cAAY,WACZC,cAAY,0BACZC,gBAAc,yBACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAM3B,UAAU,yBAGlB,yBAAKA,UAAU,2BAA2B4B,GAAG,0BAC3C,wBAAI5B,UAAU,sBACZ,wBAAIA,UAAU,mBACZ,uBAAGA,UAAU,WAAWK,KAAK,KAA7B,QACO,0BAAML,UAAU,WAAhB,eAGT,wBAAIA,UAAU,YACZ,uBAAGA,UAAU,WAAWK,KAAK,KAA7B,eAIF,wBAAIL,UAAU,YACZ,uBAAGA,UAAU,WAAWK,KAAK,KAA7B,aAIF,wBAAIL,UAAU,YACZ,uBAAGA,UAAU,WAAWK,KAAK,KAA7B,gBAKJ,0BAAML,UAAU,4BACd,2BACEA,UAAU,uBACVsB,KAAK,SACLO,YAAY,oBACZF,aAAW,SACXG,MAAOpB,EACPqB,SAAU,SAACC,GACTrB,EAAUqB,EAAEC,OAAOH,UAGvB,4BACE9B,UAAU,uCACVsB,KAAK,SACLY,QA/DM,SAACF,GAEjB,GADAA,EAAEG,iBACa,KAAXzB,EACF,OAAO0B,MAAM,4BAEfvB,EAASH,KAuDD,aAUN,yBAAKV,UAAU,WACZQ,EAAQ6B,KAAI,SAACC,EAAQC,GACpB,OACE,kBAAC,EAAD,CACEzC,WAAYwC,EAAOA,OAAOE,MAC1BzC,SAAUuC,EAAOA,OAAOG,MACxBC,IAAKH,UCvFCI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3d75cbc4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport style from \"../components/recipe.module.css\";\r\n\r\nconst Recipe = ({ recipeName, imageSrc }) => {\r\n  return (\r\n    <div className=\"card\" style={{ width: \"18rem\" }}>\r\n      <img src={imageSrc} className=\"card-img-top\" alt=\"...\" />\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">{recipeName}</h5>\r\n        <p className=\"card-text\">\r\n          Some quick example text to build on the card title and make up the\r\n          bulk of the card's content.\r\n        </p>\r\n        <a href=\"#\" className=\"btn btn-primary\">\r\n          Order Now\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Recipe from \"./components/Recipe\";\n\nconst App = () => {\n  const APP_ID = 41245641;\n  const APP_KEY = \"4b9d5191e07284e29b0f54d2e6e1a50a\";\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"chicken\");\n\n  useEffect(() => {\n    fetchAPI();\n  }, [query]);\n\n  const fetchAPI = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}&from=0&to=3&calories=591-722&health=alcohol-free`\n    );\n    const data = await response.json();\n    setRecipes(data.hits);\n  };\n\n  const getSearch = (e) => {\n    e.preventDefault();\n    if (search === \"\") {\n      return alert(\"please enter your recipe\");\n    }\n    setQuery(search);\n  };\n\n  return (\n    <div className=\"container-fluid\">\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a className=\"navbar-brand\" href=\"#\">\n          Paradise\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item active\">\n              <a className=\"nav-link\" href=\"#\">\n                Home <span className=\"sr-only\">(current)</span>\n              </a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"#\">\n                Categories\n              </a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"#\">\n                About us\n              </a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"#\">\n                Contact us\n              </a>\n            </li>\n          </ul>\n          <form className=\"form-inline my-2 my-lg-0\">\n            <input\n              className=\"form-control mr-sm-2\"\n              type=\"search\"\n              placeholder=\"Search for recipe\"\n              aria-label=\"Search\"\n              value={search}\n              onChange={(e) => {\n                setSearch(e.target.value);\n              }}\n            />\n            <button\n              className=\"btn btn-outline-warning my-2 my-sm-0\"\n              type=\"submit\"\n              onClick={getSearch}\n            >\n              Search\n            </button>\n          </form>\n        </div>\n      </nav>\n      <div className=\"recipes\">\n        {recipes.map((recipe, index) => {\n          return (\n            <Recipe\n              recipeName={recipe.recipe.label}\n              imageSrc={recipe.recipe.image}\n              key={index}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}